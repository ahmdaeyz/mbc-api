// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9311120dDecodeGithubComAhmdaeyzMbcApi(in *jlexer.Lexer, out *Show) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Title":
			out.Title = string(in.String())
		case "Description":
			out.Description = string(in.String())
		case "ImgURL":
			out.ImgURL = string(in.String())
		case "ShowTimes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ShowTimes = make(map[string]time.Time)
				} else {
					out.ShowTimes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 time.Time
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					(out.ShowTimes)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "GMT":
			out.GMT = string(in.String())
		case "Currently":
			out.Currently = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9311120dEncodeGithubComAhmdaeyzMbcApi(out *jwriter.Writer, in Show) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"Description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"ImgURL\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImgURL))
	}
	{
		const prefix string = ",\"ShowTimes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.ShowTimes == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v2First := true
			for v2Name, v2Value := range in.ShowTimes {
				if v2First {
					v2First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v2Name))
				out.RawByte(':')
				out.Raw((v2Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"GMT\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GMT))
	}
	{
		const prefix string = ",\"Currently\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Currently))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Show) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Show) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Show) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Show) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi(l, v)
}
func easyjson9311120dDecodeGithubComAhmdaeyzMbcApi1(in *jlexer.Lexer, out *Scrapper) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Url":
			out.Url = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9311120dEncodeGithubComAhmdaeyzMbcApi1(out *jwriter.Writer, in Scrapper) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Url))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Scrapper) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Scrapper) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Scrapper) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Scrapper) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi1(l, v)
}
func easyjson9311120dDecodeGithubComAhmdaeyzMbcApi2(in *jlexer.Lexer, out *Day) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Shows":
			if in.IsNull() {
				in.Skip()
				out.Shows = nil
			} else {
				in.Delim('[')
				if out.Shows == nil {
					if !in.IsDelim(']') {
						out.Shows = make([]Show, 0, 1)
					} else {
						out.Shows = []Show{}
					}
				} else {
					out.Shows = (out.Shows)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Show
					(v3).UnmarshalEasyJSON(in)
					out.Shows = append(out.Shows, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Date":
			(out.Date).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9311120dEncodeGithubComAhmdaeyzMbcApi2(out *jwriter.Writer, in Day) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Shows\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Shows == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v4, v5 := range in.Shows {
				if v4 > 0 {
					out.RawByte(',')
				}
				(v5).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Date).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Day) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Day) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Day) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Day) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi2(l, v)
}
func easyjson9311120dDecodeGithubComAhmdaeyzMbcApi3(in *jlexer.Lexer, out *Date) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DayLiteral":
			out.DayLiteral = string(in.String())
		case "Date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9311120dEncodeGithubComAhmdaeyzMbcApi3(out *jwriter.Writer, in Date) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DayLiteral\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DayLiteral))
	}
	{
		const prefix string = ",\"Date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Date).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Date) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Date) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9311120dEncodeGithubComAhmdaeyzMbcApi3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Date) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Date) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9311120dDecodeGithubComAhmdaeyzMbcApi3(l, v)
}
